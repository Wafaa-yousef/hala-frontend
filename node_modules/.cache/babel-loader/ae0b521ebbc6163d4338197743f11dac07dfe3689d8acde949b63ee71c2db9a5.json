{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ALAMEEN\\\\Desktop\\\\\\u0645\\u062C\\u0644\\u062F \\u062C\\u062F\\u064A\\u062F\\\\hala-frontend\\\\src\\\\components\\\\adminTrends\\\\AdminTrends.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { io } from 'socket.io-client';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport \"./adminTrends.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(process.env.NODE_ENV === \"development\" ? \"http://localhost:5000\" : `${process.env.REACT_APP_API_URL}`);\nexport default function AdminTrends() {\n  _s();\n  const [chartData, setChartData] = useState([]);\n  const [warehouses, setWarehouses] = useState([]);\n  useEffect(() => {\n    let isMounted = true;\n    const fetchTrends = () => {\n      axios.get(`${process.env.REACT_APP_API_URL}/api/admin/trends`).then(res => {\n        if (!isMounted) return;\n        const raw = res.data;\n        const weekSet = new Set();\n        raw.forEach(w => w.trend.forEach(t => weekSet.add(t.week)));\n        const weeks = Array.from(weekSet).sort();\n        const formatted = weeks.map(week => ({\n          week\n        }));\n        raw.forEach(w => {\n          const warehouseName = w.warehouse;\n          w.trend.forEach(({\n            week,\n            utilization\n          }) => {\n            const weekRow = formatted.find(f => f.week === week);\n            if (weekRow) {\n              weekRow[warehouseName] = Math.round(utilization * 10000) / 100;\n            }\n          });\n        });\n        setChartData(formatted);\n        setWarehouses(raw.map(w => w.warehouse));\n      }).catch(err => {\n        if (isMounted) {\n          console.error('Error fetching admin trends', err);\n        }\n      });\n    };\n    fetchTrends();\n    socket.on('excel-updated', () => {\n      console.log('Socket event: excel-updated received, refetching...');\n      fetchTrends();\n    });\n    return () => {\n      isMounted = false;\n      socket.off('excel-updated');\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chartContainer\",\n    style: {\n      color: \"white\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD83D\\uDCC8 Admin Trends (Utilization % by Week)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 350,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: chartData,\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"week\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          domain: [0, 100],\n          unit: \"%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          formatter: v => `${v}%`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), warehouses.map((name, i) => /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: name,\n          stroke: ['#e20ed8ff', '#8b740bff', '#f57710ff', '#f71647ff', '#129b82ff', '#33f84dff', '#1386bbff'][i % 7],\n          dot: false\n        }, name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_s(AdminTrends, \"nFTZKeGxPfN9aprgA6OzQAYbwtI=\");\n_c = AdminTrends;\nvar _c;\n$RefreshReg$(_c, \"AdminTrends\");","map":{"version":3,"names":["useEffect","useState","axios","io","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","socket","process","env","NODE_ENV","REACT_APP_API_URL","AdminTrends","_s","chartData","setChartData","warehouses","setWarehouses","isMounted","fetchTrends","get","then","res","raw","data","weekSet","Set","forEach","w","trend","t","add","week","weeks","Array","from","sort","formatted","map","warehouseName","warehouse","utilization","weekRow","find","f","Math","round","catch","err","console","error","on","log","off","className","style","color","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","strokeDasharray","dataKey","domain","unit","formatter","v","name","i","type","stroke","dot","_c","$RefreshReg$"],"sources":["C:/Users/ALAMEEN/Desktop/Ù…Ø¬Ù„Ø¯ Ø¬Ø¯ÙŠØ¯/hala-frontend/src/components/adminTrends/AdminTrends.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { io } from 'socket.io-client';\r\n\r\nimport {\r\n  LineChart, Line, XAxis, YAxis, CartesianGrid,\r\n  Tooltip, Legend, ResponsiveContainer\r\n} from 'recharts';\r\nimport \"./adminTrends.css\"\r\nconst socket = io( process.env.NODE_ENV === \"development\"\r\n    ? \"http://localhost:5000\"\r\n    : `${process.env.REACT_APP_API_URL}`);\r\nexport default function AdminTrends() {\r\n  const [chartData, setChartData] = useState([]);\r\n  const [warehouses, setWarehouses] = useState([]);\r\n  \r\n\r\n  \r\n  useEffect(() => {\r\n  let isMounted = true;\r\n\r\n  const fetchTrends = () => {\r\n    axios.get(`${process.env.REACT_APP_API_URL}/api/admin/trends`)\r\n      .then(res => {\r\n        if (!isMounted) return;\r\n\r\n        const raw = res.data;\r\n\r\n        const weekSet = new Set();\r\n        raw.forEach(w => w.trend.forEach(t => weekSet.add(t.week)));\r\n        const weeks = Array.from(weekSet).sort();\r\n\r\n        const formatted = weeks.map(week => ({ week }));\r\n\r\n        raw.forEach(w => {\r\n          const warehouseName = w.warehouse;\r\n\r\n          w.trend.forEach(({ week, utilization }) => {\r\n            const weekRow = formatted.find(f => f.week === week);\r\n            if (weekRow) {\r\n              weekRow[warehouseName] = Math.round(utilization * 10000) / 100;\r\n            }\r\n          });\r\n        });\r\n\r\n        setChartData(formatted);\r\n        setWarehouses(raw.map(w => w.warehouse));\r\n      })\r\n      .catch(err => {\r\n        if (isMounted) {\r\n          console.error('Error fetching admin trends', err);\r\n        }\r\n      });\r\n  };\r\n\r\n  fetchTrends(); \r\n\r\n  \r\n  socket.on('excel-updated', () => {\r\n    console.log('Socket event: excel-updated received, refetching...');\r\n    fetchTrends();\r\n  });\r\n\r\n  return () => {\r\n    isMounted = false;\r\n    socket.off('excel-updated');\r\n  };\r\n}, []);\r\n\r\n\r\n  return (\r\n    <div className='chartContainer' style={{color:\"white\"}}>\r\n      <h2>ðŸ“ˆ Admin Trends (Utilization % by Week)</h2>\r\n      <ResponsiveContainer width=\"100%\" height={350}>\r\n        <LineChart data={chartData}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" /> \r\n          <XAxis dataKey=\"week\" />\r\n          <YAxis domain={[0, 100]} unit=\"%\" />\r\n          <Tooltip formatter={(v) => `${v}%`} />\r\n          <Legend />\r\n          {warehouses.map((name, i) => (\r\n            <Line\r\n              key={name}\r\n              type=\"monotone\"\r\n              dataKey={name}\r\n              stroke={['#e20ed8ff', '#8b740bff', '#f57710ff', '#f71647ff', '#129b82ff','#33f84dff','#1386bbff'][i % 7]}\r\n              dot={false}\r\n            />\r\n          ))}\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}